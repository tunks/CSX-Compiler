/* The following code was generated by JFlex 1.4.3 on 3/4/12 4:01 AM */

import java_cup.runtime.*;

/* Parent Class */
class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col) {
		linenum=line;colnum=col;
	}
}

/* Integer Literal Class */
class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col) {
	   super(line,col);intValue=val; 
	};
}

/* Identifiers Class */
class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col) {
		super(line,col);identifierText=text;
	}
}

/* Character Literals Class */
class CSXCharLitToken extends CSXToken {
	String charValue;
	CSXCharLitToken(String val,int line,int col) {
		super(line,col);charValue=val;
	}
}

/* String Literals Class */
class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col) {
		super(line,col);
		stringText=text;
	}
}

/* This class is used to track line and column numbers */
class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

/*
class Symbol {
	public int sym; //identifies the token class just matched
	public CSXToken value; //contains token information beyond the identity
	public Symbol(int tokenType, CSXToken theToken) {
		sym = tokenType;
		value = theToken;
	}
}
*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/4/12 4:01 AM from the specification file
 * <tt>lite.jlex</tt>
 */
class Yylex {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\61\1\6\25\0\1\62\1\13\1\56\1\3\2\0\1\21"+
    "\1\60\1\7\1\11\1\10\1\12\1\25\1\20\1\0\1\5\12\1"+
    "\1\30\1\15\1\23\1\14\1\24\2\0\1\36\1\31\1\40\1\52"+
    "\1\35\1\51\1\2\1\41\1\47\1\2\1\37\1\33\1\2\1\44"+
    "\1\32\1\55\1\2\1\34\1\42\1\46\1\50\1\53\1\54\3\2"+
    "\1\16\1\57\1\17\3\0\1\36\1\31\1\40\1\52\1\35\1\51"+
    "\1\2\1\41\1\47\1\2\1\37\1\33\1\2\1\43\1\32\1\55"+
    "\1\2\1\34\1\42\1\45\1\50\1\53\1\54\3\2\1\26\1\22"+
    "\1\27\1\4\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\1\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\12\3\2\1\1\26\1\27\2\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\11\3\1\36\4\3\1\0\1\37"+
    "\4\0\11\3\1\40\4\3\1\41\1\42\1\43\1\3"+
    "\1\44\1\3\1\45\3\3\1\46\1\47\1\3\1\50"+
    "\2\3\1\51\1\3\1\52\1\3\1\53\1\54\1\55"+
    "\1\56\1\57\2\3\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\146\0\377\0\63"+
    "\0\63\0\63\0\63\0\63\0\u0132\0\u0165\0\63\0\63"+
    "\0\63\0\63\0\u0198\0\u01cb\0\u01fe\0\u0231\0\63\0\63"+
    "\0\63\0\63\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\63\0\63"+
    "\0\u04c8\0\u04fb\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\u052e\0\u0561\0\u0594\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\231\0\u06f9\0\u072c\0\u075f\0\u0792\0\u0462\0\63"+
    "\0\u07c5\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a"+
    "\0\u095d\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\231\0\u0a5c\0\u0a8f"+
    "\0\u0ac2\0\u0af5\0\63\0\63\0\231\0\u0b28\0\231\0\u0b5b"+
    "\0\231\0\u0b8e\0\u0bc1\0\u0bf4\0\231\0\231\0\u0c27\0\231"+
    "\0\u0c5a\0\u0c8d\0\231\0\u0cc0\0\231\0\u0cf3\0\231\0\231"+
    "\0\231\0\231\0\231\0\u0d26\0\u0d59\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\2\4\1\34\1\35\2\4\1\36\4\4"+
    "\2\37\1\40\1\4\1\41\1\4\1\42\1\43\1\44"+
    "\1\45\1\2\1\46\1\47\1\50\64\0\1\3\62\0"+
    "\2\4\26\0\25\4\10\0\1\51\64\0\1\52\71\0"+
    "\1\53\62\0\1\54\67\0\1\55\63\0\1\56\54\0"+
    "\1\57\62\0\1\60\47\0\2\4\26\0\1\4\1\61"+
    "\1\4\1\62\21\4\6\0\2\4\26\0\4\4\1\63"+
    "\20\4\6\0\2\4\26\0\2\4\1\64\22\4\6\0"+
    "\2\4\26\0\1\4\1\65\1\66\5\4\1\67\14\4"+
    "\6\0\2\4\26\0\3\4\1\70\21\4\6\0\2\4"+
    "\26\0\12\4\2\71\4\4\1\72\4\4\6\0\2\4"+
    "\26\0\5\4\1\73\17\4\6\0\2\4\26\0\1\4"+
    "\1\74\23\4\6\0\2\4\26\0\10\4\1\75\14\4"+
    "\6\0\2\4\26\0\3\4\1\76\21\4\5\0\56\77"+
    "\1\100\1\101\3\77\57\102\1\103\1\0\2\102\3\51"+
    "\1\104\57\51\6\52\1\10\54\52\1\0\2\4\26\0"+
    "\1\4\1\105\23\4\6\0\2\4\26\0\4\4\1\106"+
    "\20\4\6\0\2\4\26\0\5\4\1\107\6\4\2\110"+
    "\7\4\6\0\2\4\26\0\11\4\1\111\13\4\6\0"+
    "\2\4\26\0\12\4\2\112\11\4\6\0\2\4\26\0"+
    "\5\4\1\113\17\4\6\0\2\4\26\0\5\4\1\114"+
    "\17\4\6\0\2\4\26\0\17\4\1\115\5\4\6\0"+
    "\2\4\26\0\14\4\2\116\7\4\6\0\2\4\26\0"+
    "\2\4\1\117\22\4\6\0\2\4\26\0\16\4\1\120"+
    "\6\4\6\0\2\4\26\0\16\4\1\121\6\4\6\0"+
    "\2\4\26\0\16\4\1\122\6\4\50\0\1\77\1\0"+
    "\1\77\10\0\2\77\63\0\1\123\45\0\1\102\1\0"+
    "\1\102\11\0\2\102\2\0\3\51\1\124\57\51\1\0"+
    "\2\4\26\0\2\4\1\125\22\4\6\0\2\4\26\0"+
    "\5\4\1\126\17\4\6\0\2\4\26\0\21\4\1\127"+
    "\3\4\6\0\2\4\26\0\17\4\1\130\5\4\6\0"+
    "\2\4\26\0\4\4\1\131\20\4\6\0\2\4\26\0"+
    "\11\4\1\132\2\4\2\133\7\4\6\0\2\4\26\0"+
    "\11\4\1\134\13\4\6\0\2\4\26\0\3\4\1\135"+
    "\21\4\6\0\2\4\26\0\4\4\1\136\20\4\6\0"+
    "\2\4\26\0\11\4\1\137\13\4\6\0\2\4\26\0"+
    "\21\4\1\140\3\4\6\0\2\4\26\0\2\4\1\141"+
    "\22\4\6\0\2\4\26\0\12\4\2\142\11\4\6\0"+
    "\2\4\26\0\6\4\1\143\16\4\6\0\2\4\26\0"+
    "\3\4\1\144\21\4\6\0\2\4\26\0\14\4\2\145"+
    "\7\4\6\0\2\4\26\0\16\4\1\146\6\4\6\0"+
    "\2\4\26\0\11\4\1\147\13\4\6\0\2\4\26\0"+
    "\4\4\1\150\20\4\6\0\2\4\26\0\4\4\1\151"+
    "\20\4\6\0\2\4\26\0\14\4\2\152\7\4\6\0"+
    "\2\4\26\0\12\4\2\153\11\4\6\0\2\4\26\0"+
    "\12\4\2\154\11\4\6\0\2\4\26\0\17\4\1\155"+
    "\5\4\6\0\2\4\26\0\4\4\1\156\20\4\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3468];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\5\11\2\1\4\11\4\1\4\11"+
    "\14\1\2\11\2\0\6\11\16\1\1\0\1\11\4\0"+
    "\16\1\2\11\32\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.CHARLIT,
    new CSXCharLitToken(yytext(),
        Pos.linenum,Pos.colnum));
          }
        case 49: break;
        case 16: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LT,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 50: break;
        case 20: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RBRACE,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 51: break;
        case 44: 
          { Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_FALSE,
	  new CSXStringLitToken("false",
		Pos.linenum,Pos.colnum));
          }
        case 52: break;
        case 48: 
          { Pos.setpos();
  Pos.col += 8;
  return new Symbol(sym.rw_CONTINUE,
	  new CSXStringLitToken("continue",
		Pos.linenum,Pos.colnum));
          }
        case 53: break;
        case 13: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LBRACKET,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 54: break;
        case 12: 
          { Pos.setpos();
  Pos.col +=1;
  return new Symbol(sym.SEMI,
	new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 55: break;
        case 4: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.SLASH,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 56: break;
        case 6: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LPAREN, 
    new CSXToken(Pos.linenum, Pos.colnum));
          }
        case 57: break;
        case 23: 
          { Pos.col += 1;
          }
        case 58: break;
        case 38: 
          { Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_CHAR,
	  new CSXStringLitToken("char",
		Pos.linenum,Pos.colnum));
          }
        case 59: break;
        case 9: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.PLUS,
	new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 60: break;
        case 45: 
          { Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_WHILE,
	  new CSXStringLitToken("while",
		Pos.linenum,Pos.colnum));
          }
        case 61: break;
        case 40: 
          { Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_VOID,
	  new CSXStringLitToken("void",
		Pos.linenum,Pos.colnum));
          }
        case 62: break;
        case 18: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.COMMA,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 63: break;
        case 35: 
          { Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_BOOL,
    new CSXStringLitToken("bool",Pos.linenum,Pos.colnum));
          }
        case 64: break;
        case 14: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RBRACKET,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 65: break;
        case 21: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.COLON,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 66: break;
        case 10: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.NOT,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 67: break;
        case 26: 
          { Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.CAND,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 68: break;
        case 17: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.GT,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 69: break;
        case 34: 
          { Pos.setpos();
  Pos.col += yytext().length();
  String tempstr = yytext();
  int position = 0, count = 0;
  while (tempstr.indexOf("\n",position) != -1){
    position = tempstr.indexOf("\n", position) + 1;
    count++;
    int position_tab = position;
    int count_tab = 0;
    while (tempstr.indexOf("\t", position_tab) != -1){ //calculate amount of \t
        count_tab++;
        position_tab = tempstr.indexOf("\t", position_tab) + 1;
    }
    Pos.col = tempstr.length() - position + 1 + count_tab * 7;
  }
  Pos.line += count;
  return new Symbol(sym.MULTICOM, new
    CSXToken(Pos.linenum, Pos.colnum));
          }
        case 70: break;
        case 47: 
          { Pos.setpos();
  Pos.col += 6;
  return new Symbol(sym.rw_RETURN,
	  new CSXStringLitToken("return",
		Pos.linenum,Pos.colnum));
          }
        case 71: break;
        case 43: 
          { Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_CLASS,
	  new CSXStringLitToken("class",
		Pos.linenum,Pos.colnum));
          }
        case 72: break;
        case 28: 
          { Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.LEQ,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 73: break;
        case 15: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.MINUS,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 74: break;
        case 25: 
          { Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.EQ,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 75: break;
        case 39: 
          { Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_TRUE,
	  new CSXStringLitToken("true",
		Pos.linenum,Pos.colnum));
          }
        case 76: break;
        case 7: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.TIMES,
    new CSXToken(Pos.linenum, Pos.colnum));
          }
        case 77: break;
        case 42: 
          { Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_CONST,
	  new CSXStringLitToken("const",
		Pos.linenum,Pos.colnum));
          }
        case 78: break;
        case 46: 
          { Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_PRINT,
	  new CSXStringLitToken("print",
		Pos.linenum,Pos.colnum));
          }
        case 79: break;
        case 2: 
          { Pos.setpos(); Pos.col += yytext().length();
  double  tempdouble;
  if (yytext().startsWith("~")){
    String tempstr = yytext().substring(1);
    tempdouble = Double.parseDouble(tempstr) * (-1);
    if (tempdouble < Integer.MIN_VALUE) {
       System.out.println("********ERROR: The value below is smaller than MIN_VALUE, it has been replaced by MIN_VALUE");
       return new Symbol(sym.INTLIT,
	       new CSXIntLitToken(Integer.MIN_VALUE,Pos.linenum,Pos.colnum));
    }
    else
      return new Symbol(sym.INTLIT,
	  new CSXIntLitToken((-1)*Integer.parseInt(tempstr),Pos.linenum,Pos.colnum));
  }
  else {
    tempdouble = Double.parseDouble(yytext());
    if (tempdouble > Integer.MAX_VALUE) {
       System.out.println("********ERROR: The value below is larger than MAX_VALUE, it has been replaced by MAX_VALUE");
       return new Symbol(sym.INTLIT,
		      new CSXIntLitToken(Integer.MAX_VALUE,Pos.linenum,Pos.colnum));
    }
    else
      return new Symbol(sym.INTLIT,
		    new CSXIntLitToken(Integer.parseInt(yytext()),Pos.linenum,Pos.colnum));
  }
          }
        case 80: break;
        case 11: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.ASG,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 81: break;
        case 8: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RPAREN,
    new CSXToken(Pos.linenum, Pos.colnum));
          }
        case 82: break;
        case 32: 
          { Pos.setpos();
  Pos.col += 3;
  return new Symbol(sym.rw_INT,
	  new CSXStringLitToken("int",
		Pos.linenum,Pos.colnum));
          }
        case 83: break;
        case 37: 
          { Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_ELSE,
	  new CSXStringLitToken("else",
		Pos.linenum,Pos.colnum));
          }
        case 84: break;
        case 36: 
          { Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_READ,
	  new CSXStringLitToken("read",
		Pos.linenum,Pos.colnum));
          }
        case 85: break;
        case 24: 
          { Pos.setpos();
  Pos.col +=2;
  return new Symbol(sym.NOTEQ,
	new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 86: break;
        case 41: 
          { Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_BREAK,
    new CSXStringLitToken("break",Pos.linenum,Pos.colnum));
          }
        case 87: break;
        case 31: 
          { Pos.setpos();
  Pos.col += yytext().length();
  return new Symbol(sym.STRLIT,
    new CSXStringLitToken(yytext(),
        Pos.linenum,Pos.colnum));
          }
        case 88: break;
        case 5: 
          { Pos.line += 1;
  Pos.col = 1;
          }
        case 89: break;
        case 30: 
          { Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.rw_IF,
	  new CSXStringLitToken("if",
		Pos.linenum,Pos.colnum));
          }
        case 90: break;
        case 27: 
          { Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.COR,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 91: break;
        case 3: 
          { Pos.setpos();
  Pos.col += yytext().length();
  return new Symbol(sym.IDENTIFIER,
	  new CSXIdentifierToken(yytext(),
		Pos.linenum,Pos.colnum));
          }
        case 92: break;
        case 19: 
          { Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LBRACE,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 93: break;
        case 22: 
          { Pos.col += 8;
          }
        case 94: break;
        case 29: 
          { Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.GEQ,
    new CSXToken(Pos.linenum,Pos.colnum));
          }
        case 95: break;
        case 1: 
          { System.err.println("Lexical error (line " + Pos.linenum +
                    ", column " + Pos.colnum +
                    "): " + yytext() + " ignored.");
                        Pos.col +=1;
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {   return new Symbol(sym.EOF, new CSXToken(0,0));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
