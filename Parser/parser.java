
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Mar 04 04:01:18 EST 2012
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Mar 04 04:01:18 EST 2012
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\003\007\000\002\004" +
    "\004\000\002\004\003\000\002\005\004\000\002\005\002" +
    "\000\002\006\004\000\002\006\002\000\002\007\003\000" +
    "\002\007\002\000\002\010\013\000\002\010\014\000\002" +
    "\010\013\000\002\010\014\000\002\011\005\000\002\011" +
    "\003\000\002\012\004\000\002\012\006\000\002\013\005" +
    "\000\002\013\007\000\002\013\010\000\002\013\007\000" +
    "\002\014\004\000\002\014\003\000\002\015\011\000\002" +
    "\015\015\000\002\015\007\000\002\015\011\000\002\015" +
    "\006\000\002\015\007\000\002\015\007\000\002\015\006" +
    "\000\002\015\007\000\002\015\004\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\007\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\005\000\002\017\003\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\021\003\000\002\022\005\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\003\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\005\000" +
    "\002\025\005\000\002\025\003\000\002\026\004\000\002" +
    "\026\006\000\002\026\003\000\002\027\003\000\002\027" +
    "\006\000\002\027\005\000\002\027\006\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\005\000\002\030\003\000\002" +
    "\030\006\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\037\005\001\002\000\004\002\311\001" +
    "\002\000\004\004\006\001\002\000\054\010\uffb3\011\uffb3" +
    "\012\uffb3\013\uffb3\014\uffb3\016\uffb3\017\uffb3\020\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\033\uffb3\035\uffb3\036\uffb3\001" +
    "\002\000\004\014\010\001\002\000\016\015\ufffa\041\012" +
    "\044\022\050\015\053\020\056\011\001\002\000\006\004" +
    "\uffda\012\uffda\001\002\000\004\004\006\001\002\000\014" +
    "\015\ufffa\044\022\050\015\053\020\056\011\001\002\000" +
    "\004\015\301\001\002\000\006\004\uffd9\012\uffd9\001\002" +
    "\000\016\015\ufffa\041\012\044\022\050\015\053\020\056" +
    "\011\001\002\000\004\015\ufffe\001\002\000\004\004\006" +
    "\001\002\000\004\004\006\001\002\000\006\004\uffdb\012" +
    "\uffdb\001\002\000\012\010\024\011\025\013\027\020\026" +
    "\001\002\000\040\004\uffef\014\uffef\015\uffef\040\uffef\041" +
    "\uffef\042\uffef\043\uffef\044\uffef\050\uffef\051\uffef\052\uffef" +
    "\053\uffef\054\uffef\055\uffef\056\uffef\001\002\000\012\012" +
    "\123\044\022\050\015\056\011\001\002\000\004\005\117" +
    "\001\002\000\022\004\006\005\031\006\041\007\034\011" +
    "\045\034\042\045\037\047\035\001\002\000\042\010\uffc6" +
    "\012\uffc6\016\uffc6\017\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\073\026\uffc6\027\uffc6\030\072\031\uffc6\032\uffc6" +
    "\033\uffc6\036\uffc6\001\002\000\042\010\uffbb\012\uffbb\016" +
    "\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\036" +
    "\uffbb\001\002\000\016\010\uffd0\012\uffd0\022\uffd0\026\uffd0" +
    "\032\uffd0\036\uffd0\001\002\000\042\010\uffc3\012\uffc3\016" +
    "\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036" +
    "\uffc3\001\002\000\042\010\uffb9\012\uffb9\016\uffb9\017\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027" +
    "\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\036\uffb9\001\002" +
    "\000\042\010\uffb8\012\uffb8\016\uffb8\017\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\uffb8\036\uffb8\001\002\000\046\010" +
    "\uffbf\011\105\012\uffbf\016\uffbf\017\uffbf\020\106\021\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030" +
    "\uffbf\031\uffbf\032\uffbf\033\uffbf\036\uffbf\001\002\000\042" +
    "\010\uffb7\012\uffb7\016\uffb7\017\uffb7\021\uffb7\022\uffb7\023" +
    "\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7" +
    "\032\uffb7\033\uffb7\036\uffb7\001\002\000\036\010\uffc9\012" +
    "\uffc9\016\065\017\070\021\063\022\uffc9\023\061\024\066" +
    "\026\uffc9\027\064\031\067\032\uffc9\033\062\036\uffc9\001" +
    "\002\000\042\010\uffba\012\uffba\016\uffba\017\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\030" +
    "\uffba\031\uffba\032\uffba\033\uffba\036\uffba\001\002\000\022" +
    "\004\006\005\031\006\041\007\034\011\045\034\042\045" +
    "\037\047\035\001\002\000\010\010\057\022\052\036\054" +
    "\001\002\000\042\010\uffc0\012\uffc0\016\uffc0\017\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\036\uffc0\001\002\000" +
    "\030\004\006\005\031\006\041\007\034\011\045\034\042" +
    "\044\022\045\037\047\035\050\015\056\011\001\002\000" +
    "\010\012\053\022\052\036\054\001\002\000\004\012\050" +
    "\001\002\000\022\004\006\005\031\006\041\007\034\011" +
    "\045\034\042\045\037\047\035\001\002\000\042\010\uffc1" +
    "\012\uffc1\016\uffc1\017\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1" +
    "\033\uffc1\036\uffc1\001\002\000\022\004\006\005\031\006" +
    "\041\007\034\011\045\034\042\045\037\047\035\001\002" +
    "\000\042\010\uffb6\012\uffb6\016\uffb6\017\uffb6\021\uffb6\022" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\036\uffb6\001\002\000\022\004" +
    "\006\005\031\006\041\007\034\011\045\034\042\045\037" +
    "\047\035\001\002\000\016\010\uffd2\012\uffd2\022\uffd2\026" +
    "\uffd2\032\uffd2\036\uffd2\001\002\000\016\010\uffd1\012\uffd1" +
    "\022\uffd1\026\uffd1\032\uffd1\036\uffd1\001\002\000\040\004" +
    "\uffee\014\uffee\015\uffee\040\uffee\041\uffee\042\uffee\043\uffee" +
    "\044\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\001\002\000\042\010\uffc2\012\uffc2\016\uffc2" +
    "\017\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2" +
    "\001\002\000\022\004\006\005\031\006\041\007\034\011" +
    "\045\034\042\045\037\047\035\001\002\000\022\004\006" +
    "\005\031\006\041\007\034\011\045\034\042\045\037\047" +
    "\035\001\002\000\022\004\006\005\031\006\041\007\034" +
    "\011\045\034\042\045\037\047\035\001\002\000\022\004" +
    "\006\005\031\006\041\007\034\011\045\034\042\045\037" +
    "\047\035\001\002\000\022\004\006\005\031\006\041\007" +
    "\034\011\045\034\042\045\037\047\035\001\002\000\022" +
    "\004\006\005\031\006\041\007\034\011\045\034\042\045" +
    "\037\047\035\001\002\000\022\004\006\005\031\006\041" +
    "\007\034\011\045\034\042\045\037\047\035\001\002\000" +
    "\022\004\006\005\031\006\041\007\034\011\045\034\042" +
    "\045\037\047\035\001\002\000\042\010\uffc7\012\uffc7\016" +
    "\uffc7\017\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\073" +
    "\026\uffc7\027\uffc7\030\072\031\uffc7\032\uffc7\033\uffc7\036" +
    "\uffc7\001\002\000\022\004\006\005\031\006\041\007\034" +
    "\011\045\034\042\045\037\047\035\001\002\000\022\004" +
    "\006\005\031\006\041\007\034\011\045\034\042\045\037" +
    "\047\035\001\002\000\042\010\uffc5\012\uffc5\016\uffc5\017" +
    "\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5" +
    "\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\001" +
    "\002\000\042\010\uffc4\012\uffc4\016\uffc4\017\uffc4\021\uffc4" +
    "\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\001\002\000\022" +
    "\010\uffca\012\uffca\016\065\017\070\022\uffca\026\uffca\032" +
    "\uffca\036\uffca\001\002\000\022\010\uffcd\012\uffcd\016\065" +
    "\017\070\022\uffcd\026\uffcd\032\uffcd\036\uffcd\001\002\000" +
    "\042\010\uffc8\012\uffc8\016\uffc8\017\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\073\026\uffc8\027\uffc8\030\072\031" +
    "\uffc8\032\uffc8\033\uffc8\036\uffc8\001\002\000\022\010\uffcc" +
    "\012\uffcc\016\065\017\070\022\uffcc\026\uffcc\032\uffcc\036" +
    "\uffcc\001\002\000\022\010\uffce\012\uffce\016\065\017\070" +
    "\022\uffce\026\uffce\032\uffce\036\uffce\001\002\000\022\010" +
    "\uffcb\012\uffcb\016\065\017\070\022\uffcb\026\uffcb\032\uffcb" +
    "\036\uffcb\001\002\000\022\010\uffcf\012\uffcf\016\065\017" +
    "\070\022\uffcf\026\uffcf\032\uffcf\036\uffcf\001\002\000\024" +
    "\004\006\005\031\006\041\007\034\011\045\012\112\034" +
    "\042\045\037\047\035\001\002\000\022\004\006\005\031" +
    "\006\041\007\034\011\045\034\042\045\037\047\035\001" +
    "\002\000\010\022\052\032\110\036\054\001\002\000\042" +
    "\010\uffbe\012\uffbe\016\uffbe\017\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\032\uffbe\033\uffbe\036\uffbe\001\002\000\004\012\116\001" +
    "\002\000\042\010\uffbd\012\uffbd\016\uffbd\017\uffbd\021\uffbd" +
    "\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030" +
    "\uffbd\031\uffbd\032\uffbd\033\uffbd\036\uffbd\001\002\000\012" +
    "\012\uffd7\022\052\026\114\036\054\001\002\000\022\004" +
    "\006\005\031\006\041\007\034\011\045\034\042\045\037" +
    "\047\035\001\002\000\004\012\uffd8\001\002\000\042\010" +
    "\uffbc\012\uffbc\016\uffbc\017\uffbc\021\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\036\uffbc\001\002\000\004\032\120\001\002" +
    "\000\004\010\121\001\002\000\040\004\uffed\014\uffed\015" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\001" +
    "\002\000\006\012\ufff2\026\257\001\002\000\004\014\252" +
    "\001\002\000\004\004\006\001\002\000\004\012\126\001" +
    "\002\000\004\014\127\001\002\000\034\004\ufffc\014\ufffc" +
    "\040\ufffc\041\012\042\ufffc\043\ufffc\044\022\050\015\051" +
    "\ufffc\052\ufffc\054\ufffc\055\ufffc\056\011\001\002\000\034" +
    "\004\ufffc\014\ufffc\040\ufffc\041\012\042\ufffc\043\ufffc\044" +
    "\022\050\015\051\ufffc\052\ufffc\054\ufffc\055\ufffc\056\011" +
    "\001\002\000\004\004\006\001\002\000\024\004\006\014" +
    "\133\040\141\042\142\043\134\051\135\052\145\054\146" +
    "\055\143\001\002\000\034\004\ufffc\014\ufffc\040\ufffc\041" +
    "\012\042\ufffc\043\ufffc\044\022\050\015\051\ufffc\052\ufffc" +
    "\054\ufffc\055\ufffc\056\011\001\002\000\004\011\231\001" +
    "\002\000\004\004\006\001\002\000\004\013\224\001\002" +
    "\000\004\015\221\001\002\000\026\004\006\014\133\015" +
    "\uffea\040\141\042\142\043\134\051\135\052\145\054\146" +
    "\055\143\001\002\000\004\011\206\001\002\000\024\004" +
    "\006\005\031\006\041\007\034\010\203\011\045\034\042" +
    "\045\037\047\035\001\002\000\004\011\177\001\002\000" +
    "\012\011\161\013\uffb5\020\162\035\160\001\002\000\004" +
    "\004\006\001\002\000\004\011\147\001\002\000\022\004" +
    "\006\005\031\006\041\007\034\011\045\034\042\045\037" +
    "\047\035\001\002\000\004\012\154\001\002\000\012\012" +
    "\uffd3\022\052\026\152\036\054\001\002\000\022\004\006" +
    "\005\031\006\041\007\034\011\045\034\042\045\037\047" +
    "\035\001\002\000\004\012\uffd4\001\002\000\004\010\155" +
    "\001\002\000\026\004\uffe3\014\uffe3\015\uffe3\040\uffe3\042" +
    "\uffe3\043\uffe3\051\uffe3\052\uffe3\054\uffe3\055\uffe3\001\002" +
    "\000\004\010\157\001\002\000\026\004\uffdd\014\uffdd\015" +
    "\uffdd\040\uffdd\042\uffdd\043\uffdd\051\uffdd\052\uffdd\054\uffdd" +
    "\055\uffdd\001\002\000\004\055\172\001\002\000\024\004" +
    "\006\005\031\006\041\007\034\011\045\012\166\034\042" +
    "\045\037\047\035\001\002\000\022\004\006\005\031\006" +
    "\041\007\034\011\045\034\042\045\037\047\035\001\002" +
    "\000\010\022\052\032\164\036\054\001\002\000\010\012" +
    "\uffb4\013\uffb4\026\uffb4\001\002\000\004\012\170\001\002" +
    "\000\004\010\167\001\002\000\026\004\uffe2\014\uffe2\015" +
    "\uffe2\040\uffe2\042\uffe2\043\uffe2\051\uffe2\052\uffe2\054\uffe2" +
    "\055\uffe2\001\002\000\004\010\171\001\002\000\026\004" +
    "\uffe1\014\uffe1\015\uffe1\040\uffe1\042\uffe1\043\uffe1\051\uffe1" +
    "\052\uffe1\054\uffe1\055\uffe1\001\002\000\004\011\173\001" +
    "\002\000\022\004\006\005\031\006\041\007\034\011\045" +
    "\034\042\045\037\047\035\001\002\000\010\012\175\022" +
    "\052\036\054\001\002\000\024\004\006\014\133\040\141" +
    "\042\142\043\134\051\135\052\145\054\146\055\143\001" +
    "\002\000\026\004\uffe6\014\uffe6\015\uffe6\040\uffe6\042\uffe6" +
    "\043\uffe6\051\uffe6\052\uffe6\054\uffe6\055\uffe6\001\002\000" +
    "\022\004\006\005\031\006\041\007\034\011\045\034\042" +
    "\045\037\047\035\001\002\000\010\012\201\022\052\036" +
    "\054\001\002\000\024\004\006\014\133\040\141\042\142" +
    "\043\134\051\135\052\145\054\146\055\143\001\002\000" +
    "\026\004\uffe7\014\uffe7\015\uffe7\040\uffe7\042\uffe7\043\uffe7" +
    "\051\uffe7\052\uffe7\054\uffe7\055\uffe7\001\002\000\026\004" +
    "\uffe0\014\uffe0\015\uffe0\040\uffe0\042\uffe0\043\uffe0\051\uffe0" +
    "\052\uffe0\054\uffe0\055\uffe0\001\002\000\010\010\205\022" +
    "\052\036\054\001\002\000\026\004\uffdf\014\uffdf\015\uffdf" +
    "\040\uffdf\042\uffdf\043\uffdf\051\uffdf\052\uffdf\054\uffdf\055" +
    "\uffdf\001\002\000\022\004\006\005\031\006\041\007\034" +
    "\011\045\034\042\045\037\047\035\001\002\000\010\012" +
    "\210\022\052\036\054\001\002\000\004\014\211\001\002" +
    "\000\024\004\006\014\133\040\141\042\142\043\134\051" +
    "\135\052\145\054\146\055\143\001\002\000\004\015\213" +
    "\001\002\000\030\004\uffe9\014\uffe9\015\uffe9\040\uffe9\042" +
    "\uffe9\043\uffe9\046\214\051\uffe9\052\uffe9\054\uffe9\055\uffe9" +
    "\001\002\000\004\014\215\001\002\000\024\004\006\014" +
    "\133\040\141\042\142\043\134\051\135\052\145\054\146" +
    "\055\143\001\002\000\004\015\217\001\002\000\026\004" +
    "\uffe8\014\uffe8\015\uffe8\040\uffe8\042\uffe8\043\uffe8\051\uffe8" +
    "\052\uffe8\054\uffe8\055\uffe8\001\002\000\004\015\uffeb\001" +
    "\002\000\016\010\223\015\ufff8\044\ufff8\050\ufff8\053\ufff8" +
    "\056\ufff8\001\002\000\014\015\ufff4\044\ufff4\050\ufff4\053" +
    "\ufff4\056\ufff4\001\002\000\036\004\ufff9\014\ufff9\015\ufff9" +
    "\040\ufff9\042\ufff9\043\ufff9\044\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\001\002\000\022" +
    "\004\006\005\031\006\041\007\034\011\045\034\042\045" +
    "\037\047\035\001\002\000\010\010\226\022\052\036\054" +
    "\001\002\000\026\004\uffe5\014\uffe5\015\uffe5\040\uffe5\042" +
    "\uffe5\043\uffe5\051\uffe5\052\uffe5\054\uffe5\055\uffe5\001\002" +
    "\000\004\010\230\001\002\000\026\004\uffde\014\uffde\015" +
    "\uffde\040\uffde\042\uffde\043\uffde\051\uffde\052\uffde\054\uffde" +
    "\055\uffde\001\002\000\004\004\006\001\002\000\006\012" +
    "\uffd5\026\237\001\002\000\004\012\235\001\002\000\010" +
    "\012\uffb5\020\162\026\uffb5\001\002\000\004\010\236\001" +
    "\002\000\026\004\uffe4\014\uffe4\015\uffe4\040\uffe4\042\uffe4" +
    "\043\uffe4\051\uffe4\052\uffe4\054\uffe4\055\uffe4\001\002\000" +
    "\004\004\006\001\002\000\004\012\uffd6\001\002\000\024" +
    "\004\006\014\133\040\141\042\142\043\134\051\135\052" +
    "\145\054\146\055\143\001\002\000\004\015\243\001\002" +
    "\000\030\004\ufff8\010\223\014\ufff8\015\ufff8\040\ufff8\042" +
    "\ufff8\043\ufff8\051\ufff8\052\ufff8\054\ufff8\055\ufff8\001\002" +
    "\000\026\004\uffdc\014\uffdc\015\uffdc\040\uffdc\042\uffdc\043" +
    "\uffdc\051\uffdc\052\uffdc\054\uffdc\055\uffdc\001\002\000\010" +
    "\010\024\013\027\020\026\001\002\000\024\004\ufffd\014" +
    "\ufffd\040\ufffd\042\ufffd\043\ufffd\051\ufffd\052\ufffd\054\ufffd" +
    "\055\ufffd\001\002\000\010\012\ufff1\020\250\026\ufff1\001" +
    "\002\000\004\032\251\001\002\000\006\012\ufff0\026\ufff0" +
    "\001\002\000\034\004\ufffc\014\ufffc\040\ufffc\041\012\042" +
    "\ufffc\043\ufffc\044\022\050\015\051\ufffc\052\ufffc\054\ufffc" +
    "\055\ufffc\056\011\001\002\000\024\004\006\014\133\040" +
    "\141\042\142\043\134\051\135\052\145\054\146\055\143" +
    "\001\002\000\004\015\255\001\002\000\016\010\223\015" +
    "\ufff8\044\ufff8\050\ufff8\053\ufff8\056\ufff8\001\002\000\014" +
    "\015\ufff5\044\ufff5\050\ufff5\053\ufff5\056\ufff5\001\002\000" +
    "\010\044\022\050\015\056\011\001\002\000\004\012\ufff3" +
    "\001\002\000\004\011\262\001\002\000\012\012\263\044" +
    "\022\050\015\056\011\001\002\000\004\014\273\001\002" +
    "\000\004\012\265\001\002\000\004\014\266\001\002\000" +
    "\034\004\ufffc\014\ufffc\040\ufffc\041\012\042\ufffc\043\ufffc" +
    "\044\022\050\015\051\ufffc\052\ufffc\054\ufffc\055\ufffc\056" +
    "\011\001\002\000\024\004\006\014\133\040\141\042\142" +
    "\043\134\051\135\052\145\054\146\055\143\001\002\000" +
    "\004\015\271\001\002\000\016\010\223\015\ufff8\044\ufff8" +
    "\050\ufff8\053\ufff8\056\ufff8\001\002\000\014\015\ufff6\044" +
    "\ufff6\050\ufff6\053\ufff6\056\ufff6\001\002\000\034\004\ufffc" +
    "\014\ufffc\040\ufffc\041\012\042\ufffc\043\ufffc\044\022\050" +
    "\015\051\ufffc\052\ufffc\054\ufffc\055\ufffc\056\011\001\002" +
    "\000\024\004\006\014\133\040\141\042\142\043\134\051" +
    "\135\052\145\054\146\055\143\001\002\000\004\015\276" +
    "\001\002\000\016\010\223\015\ufff8\044\ufff8\050\ufff8\053" +
    "\ufff8\056\ufff8\001\002\000\014\015\ufff7\044\ufff7\050\ufff7" +
    "\053\ufff7\056\ufff7\001\002\000\004\015\uffff\001\002\000" +
    "\004\002\000\001\002\000\004\015\ufffb\001\002\000\004" +
    "\004\006\001\002\000\004\011\025\001\002\000\004\013" +
    "\306\001\002\000\022\004\006\005\031\006\041\007\034" +
    "\011\045\034\042\045\037\047\035\001\002\000\010\010" +
    "\310\022\052\036\054\001\002\000\040\004\uffec\014\uffec" +
    "\015\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\004\003\003\001\001\000\002\001\001\000" +
    "\004\031\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\013\006\016\010\012\013\015\016\020\001" +
    "\001\000\002\001\001\000\004\031\304\001\001\000\010" +
    "\006\301\010\012\016\302\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\277\006\016\010\012\013\015" +
    "\016\020\001\001\000\002\001\001\000\004\031\260\001" +
    "\001\000\004\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\124\012\121\016" +
    "\123\001\001\000\002\001\001\000\020\022\042\023\031" +
    "\024\037\025\027\026\032\027\043\031\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\057\027\043\031\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\046\022\045\023\031" +
    "\024\037\025\027\026\032\027\043\031\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\026\050\027\043" +
    "\031\035\001\001\000\002\001\001\000\016\023\055\024" +
    "\037\025\027\026\032\027\043\031\035\001\001\000\002" +
    "\001\001\000\016\023\054\024\037\025\027\026\032\027" +
    "\043\031\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\103\025" +
    "\027\026\032\027\043\031\035\001\001\000\014\024\102" +
    "\025\027\026\032\027\043\031\035\001\001\000\014\024" +
    "\101\025\027\026\032\027\043\031\035\001\001\000\014" +
    "\024\100\025\027\026\032\027\043\031\035\001\001\000" +
    "\012\025\077\026\032\027\043\031\035\001\001\000\014" +
    "\024\076\025\027\026\032\027\043\031\035\001\001\000" +
    "\014\024\075\025\027\026\032\027\043\031\035\001\001" +
    "\000\012\025\070\026\032\027\043\031\035\001\001\000" +
    "\002\001\001\000\010\026\074\027\043\031\035\001\001" +
    "\000\010\026\073\027\043\031\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\017\110\022\112" +
    "\023\031\024\037\025\027\026\032\027\043\031\035\001" +
    "\001\000\020\022\106\023\031\024\037\025\027\026\032" +
    "\027\043\031\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\017\114\022\112\023\031\024\037\025\027\026" +
    "\032\027\043\031\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\131\013\127\016\130\001\001\000\010\005\245\013\127" +
    "\016\130\001\001\000\004\031\244\001\001\000\012\014" +
    "\136\015\137\030\135\031\143\001\001\000\010\005\240" +
    "\013\127\016\130\001\001\000\002\001\001\000\004\031" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\217\015\137\030\135\031\143\001\001\000\002\001" +
    "\001\000\020\022\203\023\031\024\037\025\027\026\032" +
    "\027\043\031\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\031\155\001\001\000\002\001\001\000\022" +
    "\021\147\022\150\023\031\024\037\025\027\026\032\027" +
    "\043\031\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\152\022\150\023\031\024\037\025\027\026" +
    "\032\027\043\031\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\017\164\022\112\023\031" +
    "\024\037\025\027\026\032\027\043\031\035\001\001\000" +
    "\020\022\162\023\031\024\037\025\027\026\032\027\043" +
    "\031\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\022" +
    "\173\023\031\024\037\025\027\026\032\027\043\031\035" +
    "\001\001\000\002\001\001\000\010\015\175\030\135\031" +
    "\143\001\001\000\002\001\001\000\020\022\177\023\031" +
    "\024\037\025\027\026\032\027\043\031\035\001\001\000" +
    "\002\001\001\000\010\015\201\030\135\031\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\022\206\023\031\024\037\025\027" +
    "\026\032\027\043\031\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\015\211\030\135\031\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\215\030\135\031\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\022\224" +
    "\023\031\024\037\025\027\026\032\027\043\031\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\232\030\231\031\233\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\237\030" +
    "\231\031\233\001\001\000\002\001\001\000\012\014\241" +
    "\015\137\030\135\031\143\001\001\000\002\001\001\000" +
    "\004\007\243\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\252\013\127\016\130\001\001" +
    "\000\012\014\253\015\137\030\135\031\143\001\001\000" +
    "\002\001\001\000\004\007\255\001\001\000\002\001\001" +
    "\000\010\011\257\012\121\016\123\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\263\012\121\016\123" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\266\013\127\016\130\001\001\000\012" +
    "\014\267\015\137\030\135\031\143\001\001\000\002\001" +
    "\001\000\004\007\271\001\001\000\002\001\001\000\010" +
    "\005\273\013\127\016\130\001\001\000\012\014\274\015" +
    "\137\030\135\031\143\001\001\000\002\001\001\000\004" +
    "\007\276\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\031\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\022\306\023" +
    "\031\024\037\025\027\026\032\027\043\031\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
              
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return Scanner.next_token(); 
    }


 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),
			null);
     }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ident ::= IDENTIFIER 
            {
              nameNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIdentifierToken i = (CSXIdentifierToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new nameNode(
					  new identNode(i.identifierText,
						 i.linenum,i.colnum),
					  exprNode.NULL,
					  i.linenum,i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // name ::= ident LBRACKET expr RBRACKET 
            {
              nameNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new nameNode(id.returnVar(), e, id.linenum,id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // name ::= ident 
            {
              nameNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new nameNode(id.returnVar(), exprNode.NULL, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // unit ::= LPAREN expr RPAREN 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =
                 new exprUnitNode(e, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // unit ::= rw_FALSE 
            {
              exprNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken f = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new falseNode(f.linenum, f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // unit ::= rw_TRUE 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken t = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new trueNode(t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // unit ::= STRLIT 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken i = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new strLitNode(i.stringText, i.linenum, i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // unit ::= CHARLIT 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXCharLitToken i = (CSXCharLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new charLitNode(i.charValue, i.linenum, i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // unit ::= INTLIT 
            {
              exprNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXIntLitToken i = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new intLitNode(i.intValue, i.linenum, i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // unit ::= ident LPAREN args RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new fctCallNode(id.returnVar(), a, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // unit ::= ident LPAREN RPAREN 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new fctCallNode(id.returnVar(), argsNode.NULL, id.linenum,
                 id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // unit ::= ident LBRACKET expr RBRACKET 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new nameNode(id.returnVar(), e, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // unit ::= ident 
            {
              exprNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new nameNode(id.returnVar(), exprNode.NULL, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*unit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // unary ::= unit 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode n = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new unaryOpNode(-1, n, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // unary ::= LPAREN type RPAREN unary 
            {
              exprNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new castNode(t, u, l.linenum, l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // unary ::= NOT unary 
            {
              exprNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXToken n = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new unaryOpNode(sym.NOT, u, u.linenum, u.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*unary*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pri ::= unary 
            {
              binaryOpNode RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new binaryOpNode(u, -1, exprNode.NULL, u.linenum, u.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pri ::= pri SLASH unary 
            {
              binaryOpNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		binaryOpNode p = (binaryOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new binaryOpNode(p, sym.SLASH, u, p.linenum, p.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pri ::= pri TIMES unary 
            {
              binaryOpNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		binaryOpNode p = (binaryOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode u = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new binaryOpNode(p, sym.TIMES, u, p.linenum, p.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*pri*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= pri 
            {
              factorNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		binaryOpNode p = (binaryOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new factorNode(p, -1, exprNode.NULL, p.linenum, p.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= factor MINUS pri 
            {
              factorNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		binaryOpNode p = (binaryOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new factorNode(f, sym.MINUS, p, f.linenum, f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // factor ::= factor PLUS pri 
            {
              factorNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		binaryOpNode p = (binaryOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new factorNode(f, sym.PLUS, p, f.linenum, f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, -1, exprNode.NULL, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= factor NOTEQ factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f2 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, sym.NOTEQ, f2, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // term ::= factor EQ factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f2 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, sym.EQ, f2, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // term ::= factor GEQ factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f2 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, sym.GEQ, f2, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // term ::= factor LEQ factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f2 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, sym.LEQ, f2, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // term ::= factor GT factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f2 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, sym.GT, f2, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // term ::= factor LT factor 
            {
              relationOpNode RESULT = null;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		factorNode f1 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		factorNode f2 = (factorNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new relationOpNode(f1, sym.LT, f2, f1.linenum, f1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= term 
            {
              exprNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		relationOpNode t = (relationOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new booleanOpNode(exprNode.NULL, -1, t, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr CAND term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		relationOpNode t = (relationOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new booleanOpNode(e, sym.CAND, t, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= expr COR term 
            {
              exprNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		relationOpNode t = (relationOpNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new booleanOpNode(e, sym.COR, t, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // writelist ::= expr 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new printNode(e, printNode.NULL, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*writelist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // writelist ::= expr COMMA writelist 
            {
              printNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		printNode w = (printNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new printNode(e, w, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*writelist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // readlist ::= name 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new readNode(n, readNode.NULL, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*readlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // readlist ::= name COMMA readlist 
            {
              readNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		readNode r = (readNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new readNode(n, r, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*readlist*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= expr 
            {
              argsNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new argsNode(e, argsNode.NULL, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // args ::= expr COMMA args 
            {
              argsNode RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new argsNode(e, a, e.linenum, e.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*args*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= rw_BOOL 
            {
              typeNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken b = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new boolTypeNode(b.linenum, b.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= rw_CHAR 
            {
              typeNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken c = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new charTypeNode(c.linenum, c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type ::= rw_INT 
            {
              typeNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXStringLitToken i = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new intTypeNode(i.linenum, i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              stmtNode RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new blockNode(f, s, l.linenum, l.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= rw_CONTINUE ident SEMI 
            {
              stmtNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXStringLitToken c = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new continueNode(id.returnVar(), c.linenum, c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= rw_BREAK ident SEMI 
            {
              stmtNode RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXStringLitToken b = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new breakNode(id.returnVar(), b.linenum, b.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= rw_RETURN expr SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXStringLitToken r = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new returnNode(e, r.linenum, r.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= rw_RETURN SEMI 
            {
              stmtNode RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CSXStringLitToken r = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new returnNode(exprNode.NULL, r.linenum, r.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= ident LPAREN args RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argsNode a = (argsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =
                 new callNode(id.returnVar(), a, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= ident LPAREN RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = 
                 new callNode(id.returnVar(), argsNode.NULL, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= rw_PRINT LPAREN writelist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		printNode p = (printNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new printNode(exprNode.NULL, p, p.linenum, p.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= rw_READ LPAREN readlist RPAREN SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		readNode n = (readNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new readNode(nameNode.NULL, n, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt ::= name ASG expr SEMI 
            {
              stmtNode RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode n = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new asgNode(n, e, n.linenum, n.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmt ::= ident COLON rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new whileNode(id.returnVar(), e, s, id.linenum, id.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // stmt ::= rw_WHILE LPAREN expr RPAREN stmt 
            {
              stmtNode RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXStringLitToken w = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= rw_IF LPAREN expr RPAREN LBRACE stmt RBRACE rw_ELSE LBRACE stmt RBRACE 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		CSXStringLitToken i = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode s2 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new ifThenNode(e, s1, s2, i.linenum, i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= rw_IF LPAREN expr RPAREN LBRACE stmt RBRACE 
            {
              stmtNode RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		CSXStringLitToken i = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new ifThenNode(e, s1, stmtNode.NULL, i.linenum, i.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmts ::= stmt 
            {
              stmtsNode RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new stmtsNode(s1, stmtsNode.NULL, s1.linenum, s1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmts ::= stmt stmts 
            {
              stmtsNode RESULT = null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		stmtNode s1 = (stmtNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		stmtsNode s2 = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT =
			     new stmtsNode(s1, s2, s1.linenum, s1.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*stmts*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fielddecl ::= rw_CONST ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXStringLitToken c = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new constDeclNode(id.returnVar(), e, c.linenum, c.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fielddecl ::= type ident LBRACKET INTLIT RBRACKET SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXIntLitToken lit = (CSXIntLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new arrayDeclNode(id.returnVar(), t, new intLitNode(lit.intValue, lit.linenum, lit.colnum), 
                 t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // fielddecl ::= type ident ASG expr SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		exprNode e = (exprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new varDeclNode(id.returnVar(), t, e, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // fielddecl ::= type ident SEMI 
            {
              declNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = 
                 new varDeclNode(id.returnVar(), t, exprNode.NULL, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*fielddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argdecl ::= type ident LBRACKET RBRACKET 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =
                  new arrayArgDeclNode(id.returnVar(), t, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*argdecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argdecl ::= type ident 
            {
              argDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new valArgDeclNode(id.returnVar(), t, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*argdecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // argdecls ::= argdecl 
            {
              argDeclsNode RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclNode arg = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new argDeclsNode(arg, argDeclsNode.NULL, arg.linenum, arg.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*argdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // argdecls ::= argdecl COMMA argdecls 
            {
              argDeclsNode RESULT = null;
		int argleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		argDeclNode arg = (argDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		argDeclsNode args = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = 
                 new argDeclsNode(arg, args, arg.linenum, arg.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*argdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // methoddecl ::= type ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		argDeclsNode as = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new methodDeclNode(id.returnVar(), as, t, f, s, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // methoddecl ::= type ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		typeNode t = (typeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new methodDeclNode(id.returnVar(), argDeclsNode.NULL, t, f, s, t.linenum, t.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // methoddecl ::= rw_VOID ident LPAREN argdecls RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		CSXStringLitToken v = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		argDeclsNode as = (argDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = 
                 new methodDeclNode(id.returnVar(), as, new voidTypeNode(v.linenum,
                 v.colnum), f, s, v.linenum, v.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // methoddecl ::= rw_VOID ident LPAREN RPAREN LBRACE fielddecls stmts RBRACE optionalSemi 
            {
              methodDeclNode RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		CSXStringLitToken v = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		fieldDeclsNode f = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		stmtsNode s = (stmtsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT =
                 new methodDeclNode(id.returnVar(), argDeclsNode.NULL, 
                 new voidTypeNode(v.linenum, v.colnum),f, s, v.linenum, v.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*methoddecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // optionalSemi ::= 
            {
              optionalSemiNode RESULT = null;
		 RESULT= optionalSemiNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // optionalSemi ::= SEMI 
            {
              optionalSemiNode RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		CSXToken s = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new optionalSemiNode(sym.SEMI, s.linenum, s.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*optionalSemi*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // methoddecls ::= 
            {
              methodDeclsNode RESULT = null;
		 RESULT= methodDeclsNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // methoddecls ::= methoddecl methoddecls 
            {
              methodDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		methodDeclNode m = (methodDeclNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int msleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int msright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode ms = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=
                 new  methodDeclsNode(m, ms, m.linenum, m.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*methoddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fielddecls ::= 
            {
              fieldDeclsNode RESULT = null;
		  RESULT= fieldDeclsNode.NULL; 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // fielddecls ::= fielddecl fielddecls 
            {
              fieldDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		fieldDeclsNode fs = (fieldDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  RESULT=
                 new fieldDeclsNode(f, fs, f.linenum, f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*fielddecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // memberdecls ::= methoddecls 
            {
              memberDeclsNode RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		methodDeclsNode m = (methodDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT=
                new memberDeclsNode(declNode.NULL, m, memberDeclsNode.NULL, 
                m.linenum, m.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // memberdecls ::= fielddecl memberdecls 
            {
              memberDeclsNode RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declNode f = (declNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT= 
                new memberDeclsNode(f, methodDeclsNode.NULL, m, f.linenum, f.colnum); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*memberdecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= rw_CLASS ident LBRACE memberdecls RBRACE 
            {
              csxLiteNode RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		CSXStringLitToken c = (CSXStringLitToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		nameNode id = (nameNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CSXToken l = (CSXToken)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		memberDeclsNode m = (memberDeclsNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT= 
                new csxLiteNode(
                    new classNode(id.returnVar(), m, c.linenum, c.colnum)); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		csxLiteNode start_val = (csxLiteNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

