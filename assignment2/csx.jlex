/*  Expand this file into your solution for project 2 */

class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col) {
		linenum=line;colnum=col;
	}
}

//integer
class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col) {
	   super(line,col);intValue=val; 
	};
}

//identifier
class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col) {
		super(line,col);identifierText=text;
	}
}

//character
class CSXCharLitToken extends CSXToken {
	String charValue;
	CSXCharLitToken(String val,int line,int col) {
		super(line,col);charValue=val;
	}
}

//string
class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col) {
		super(line,col);
		stringText=text;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

class Symbol { 
	public int sym; //identifies the token class just matched
	public CSXToken value; //contains token information beyond the identity
	public Symbol(int tokenType, CSXToken theToken) {
		sym = tokenType;
		value = theToken;
	}
}

%%

DIGIT=[0-9]
//IDENTIFIER = [:jletter:][:jletterdigit:]*
IDENTIFIER = [A-Za-z0-9]
//MULTICOMMENT=([#]+[^#]|[^#])*
MULTICOMMENT=[#][^#]|[^#]



%type Symbol
%eofval{
  return new Symbol(sym.EOF, new CSXToken(0,0));
%eofval}


%%

("~"{DIGIT}+)|({DIGIT}+)	{
	Pos.setpos(); Pos.col += yytext().length();
  double  tempdouble;
  if (yytext().startsWith("~")){
    String tempstr = yytext().substring(1);
    tempdouble = Double.parseDouble(tempstr) * (-1);
    if (tempdouble < Integer.MIN_VALUE) {
       System.out.println("********ERROR: The value below is smaller than MIN_VALUE, it has been replaced by MIN_VALUE");
       return new Symbol(sym.INTLIT,
	       new CSXIntLitToken(Integer.MIN_VALUE,Pos.linenum,Pos.colnum));
    }
    else
      return new Symbol(sym.INTLIT,
	  new CSXIntLitToken((-1)*Integer.parseInt(tempstr),Pos.linenum,Pos.colnum));
  }
	else {
    tempdouble = Double.parseDouble(yytext());
    if (tempdouble > Integer.MAX_VALUE) {
       System.out.println("********ERROR: The value below is larger than MAX_VALUE, it has been replaced by MAX_VALUE");
       return new Symbol(sym.INTLIT,
		      new CSXIntLitToken(Integer.MAX_VALUE,Pos.linenum,Pos.colnum));
    }
    else
      return new Symbol(sym.INTLIT,
		    new CSXIntLitToken(Integer.parseInt(yytext()),Pos.linenum,Pos.colnum));
  }
}


//multi-line comment
("##"{MULTICOMMENT}*"##") {
  Pos.setpos();
  Pos.col += yytext().length();
  String tempstr = yytext();
  int position = 0, count = 0;
  while (tempstr.indexOf("\n",position) != -1){
    position = tempstr.indexOf("\n", position) + 1;
    count++;
    int position_tab = position;
    int count_tab = 0;
    while (tempstr.indexOf("\t", position_tab) != -1){ //calculate amount of \t
        count_tab++;
        position_tab = tempstr.indexOf("\t", position_tab) + 1;
    }
    Pos.col = tempstr.length() - position + 1 + count_tab * 3;
  }
  Pos.line += count;
  return new Symbol(sym.MULTICOM, new
    CSXToken(Pos.linenum, Pos.colnum));
}

//single line comment
("/""/"([^\n])*"\n") {
  Pos.line += 1;
  Pos.col = 1;
}


/***********************other tokens**********************/
"(" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LPAREN, 
    new CSXToken(Pos.linenum, Pos.colnum));
}

"*" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.TIMES,
    new CSXToken(Pos.linenum, Pos.colnum));
}

")" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RPAREN,
    new CSXToken(Pos.linenum, Pos.colnum));
}

"+"	{
	Pos.setpos();
	Pos.col += 1;
	return new Symbol(sym.PLUS,
		new CSXToken(Pos.linenum,Pos.colnum));
}

"!="	{
	Pos.setpos();
	Pos.col +=2;
	return new Symbol(sym.NOTEQ,
		new CSXToken(Pos.linenum,Pos.colnum));
}

";"	{
	Pos.setpos();
	Pos.col +=1;
	return new Symbol(sym.SEMI,
		new CSXToken(Pos.linenum,Pos.colnum));
}

"[" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LBRACKET,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"]" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RBRACKET,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"=" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.ASG,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"-" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.MINUS,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"/" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.SLASH,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"==" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.EQ,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"&&" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.CAND,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"||" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.COR,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"<" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LT,
    new CSXToken(Pos.linenum,Pos.colnum));
}

">" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.GT,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"<=" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.LEQ,
    new CSXToken(Pos.linenum,Pos.colnum));
}

">=" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.GEQ,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"," {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.COMMA,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"!" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.NOT,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"{" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LBRACE,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"}" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RBRACE,
    new CSXToken(Pos.linenum,Pos.colnum));
}

":" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.COLON,
    new CSXToken(Pos.linenum,Pos.colnum));
}

/*************************reserved words***************************/
(b|B)(o|O)(o|0)(l|L) {
  Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_BOOL,
    new CSXStringLitToken("bool",Pos.linenum,Pos.colnum));
}

(b|B)(r|R)(e|E)(a|A)(k|K) {
  Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_BREAK,
    new CSXStringLitToken("break",Pos.linenum,Pos.colnum));
}

(c|C)(h|H)(a|A)(r|R) {
  Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_CHAR,
	  new CSXStringLitToken("char",
			Pos.linenum,Pos.colnum));
}

(c|C)(l|L)(a|A)(s|S)(s|S) {
  Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_CLASS,
	  new CSXStringLitToken("class",
			Pos.linenum,Pos.colnum));
}

(c|C)(o|O)(n|N)(s|S)(t|T) {
  Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_CONST,
	  new CSXStringLitToken("const",
			Pos.linenum,Pos.colnum));
}

(c|C)(o|O)(n|N)(t|T)(i|I)(n|N)(u|U)(e|E) {
  Pos.setpos();
  Pos.col += 8;
  return new Symbol(sym.rw_CONTINUE,
	  new CSXStringLitToken("continue",
			Pos.linenum,Pos.colnum));
}

(e|E)(l|L)(s|S)(e|E) {
  Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_ELSE,
	  new CSXStringLitToken("else",
			Pos.linenum,Pos.colnum));
}

(f|F)(a|A)(l|L)(s|S)(e|E) {
  Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_FALSE,
	  new CSXStringLitToken("false",
			Pos.linenum,Pos.colnum));
}

(i|I)(f|F) {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.rw_IF,
	  new CSXStringLitToken("if",
			Pos.linenum,Pos.colnum));
}

(i|I)(n|N)(t|T) {
  Pos.setpos();
  Pos.col += 3;
  return new Symbol(sym.rw_INT,
	  new CSXStringLitToken("int",
			Pos.linenum,Pos.colnum));
}

(r|R)(e|E)(a|A)(d|D) {
  Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_READ,
	  new CSXStringLitToken("read",
			Pos.linenum,Pos.colnum));
}

(r|R)(e|E)(t|T)(u|U)(r|R)(n|N) {
  Pos.setpos();
  Pos.col += 6;
  return new Symbol(sym.rw_RETURN,
	  new CSXStringLitToken("return",
			Pos.linenum,Pos.colnum));
}

(t|T)(r|R)(u|U)(e|E) {
  Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_TRUE,
	  new CSXStringLitToken("true",
			Pos.linenum,Pos.colnum));
}

(v|V)(o|O)(i|I)(d|D) {
  Pos.setpos();
  Pos.col += 4;
  return new Symbol(sym.rw_VOID,
	  new CSXStringLitToken("void",
			Pos.linenum,Pos.colnum));
}

(w|W)(h|H)(i|I)(l|L)(e|E) {
  Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_WHILE,
	  new CSXStringLitToken("while",
			Pos.linenum,Pos.colnum));
}

(p|P)(r|R)(i|I)(n|N)(t|T) {
  Pos.setpos();
  Pos.col += 5;
  return new Symbol(sym.rw_PRINT,
	  new CSXStringLitToken("print",
			Pos.linenum,Pos.colnum));
}


/**********************ientifiers********************/
[A-Za-z]{IDENTIFIER}* {
 	Pos.setpos();
  Pos.col += yytext().length();
  return new Symbol(sym.IDENTIFIER,
	  new CSXStringLitToken(yytext(),
			  Pos.linenum,Pos.colnum));
}

/***********************String Literals***************/
"\""([^\"\\]|\\t|\\n|\\\\|\\\")*"\"" {
  Pos.setpos();
  Pos.col += yytext().length();
  return new Symbol(sym.STRLIT,
    new CSXStringLitToken(yytext(),
        Pos.linenum,Pos.colnum));
}

/*********************Character Literals*****************/
"'"([^\\'\040]|\\'|\\n|\\t|\\\\)"'" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.CHARLIT,
    new CSXCharLitToken(yytext(),
        Pos.linenum,Pos.colnum));
}

\t  {
  Pos.col += 4;
}

\n	{
	Pos.line += 1;
	Pos.col = 1;
}
" "	{
	Pos.col += 1;
}

[^] {
  Pos.setpos();
  Pos.col += yytext().length();
  return new Symbol(sym.UNKNOWN,new CSXStringLitToken(yytext(),Pos.linenum,Pos.colnum));
}
