/*  Expand this file into your solution for project 2 */

class CSXToken {
	int linenum;
	int colnum;
	CSXToken(int line,int col) {
		linenum=line;colnum=col;
	}
}

//integer
class CSXIntLitToken extends CSXToken {
	int intValue;
	CSXIntLitToken(int val,int line,int col) {
	   super(line,col);intValue=val; 
	};
}

//identifier
class CSXIdentifierToken extends CSXToken {
	String identifierText;
	CSXIdentifierToken(String text,int line,int col) {
		super(line,col);identifierText=text;
	}
}

//character
class CSXCharLitToken extends CSXToken {
	char charValue;
	CSXCharLitToken(char val,int line,int col) {
		super(line,col);charValue=val;
	}
}

//string
class CSXStringLitToken extends CSXToken {
	String stringText; // Full text of string literal,
                          //  including quotes & escapes
	CSXStringLitToken(String text,int line,int col) {
		super(line,col);
		stringText=text;
	}
}

// This class is used to track line and column numbers
// Feel free to change to extend it
class Pos {
	static int  linenum = 1; /* maintain this as line number current
                                 token was scanned on */
	static int  colnum = 1; /* maintain this as column number current
                                 token began at */
	static int  line = 1; /* maintain this as line number after
					scanning current token  */
	static int  col = 1; /* maintain this as column number after
					scanning current token  */
	static void setpos() { // set starting position for current token
		linenum = line;
		colnum = col;
	}
}

class Symbol { 
	public int sym; //identifies the token class just matched
	public CSXToken value; //contains token information beyond the identity
	public Symbol(int tokenType, CSXToken theToken) {
		sym = tokenType;
		value = theToken;
	}
}

%%

DIGIT=[0-9]
MULTICOMMENT=([#]+[^#]|[^#])*


%type Symbol
%eofval{
  return new Symbol(sym.EOF, new CSXToken(0,0));
%eofval}


%%

("~"{DIGIT}+)|({DIGIT}+)	{
	// This def doesn't check for overflow -- be sure to update it
	Pos.setpos(); Pos.col += yytext().length();
  if (yytext().startsWith("~")){
    String tempstr = yytext().substring(1);
    return new Symbol(sym.INTLIT,
	new CSXIntLitToken((-1)*Integer.parseInt(tempstr),
			Pos.linenum,Pos.colnum));
  }
	else {return new Symbol(sym.INTLIT,
		new CSXIntLitToken(Integer.parseInt(yytext()),
			Pos.linenum,Pos.colnum));}
}

//multi-line comment
("##"{MULTICOMMENT}"#"+"#") {
  Pos.setpos();
  Pos.col += yytext().length();
  String tempstr = yytext();
  int position = 0, count = 0;
  while (tempstr.indexOf("\n",position) != -1){
    position = tempstr.indexOf("\n", position) + 1;
    count++;
  }
  Pos.line += count;
  return new Symbol(sym.MULTICOM, new
    CSXToken(Pos.linenum, Pos.colnum));
}

//single line comment
("/""/"([^\n])*"\n") {
  Pos.line += 1;
  Pos.col = 1;
}

//other tokens
"(" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LPAREN, 
    new CSXToken(Pos.linenum, Pos.colnum));
}

"*" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.TIMES,
    new CSXToken(Pos.linenum, Pos.colnum));
}

")" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RPAREN,
    new CSXToken(Pos.linenum, Pos.colnum));
}

"+"	{
	Pos.setpos();
	Pos.col += 1;
	return new Symbol(sym.PLUS,
		new CSXToken(Pos.linenum,Pos.colnum));
}

"!="	{
	Pos.setpos();
	Pos.col +=2;
	return new Symbol(sym.NOTEQ,
		new CSXToken(Pos.linenum,Pos.colnum));
}

";"	{
	Pos.setpos();
	Pos.col +=1;
	return new Symbol(sym.SEMI,
		new CSXToken(Pos.linenum,Pos.colnum));
}

"[" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LBRACKET,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"]" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RBRACKET,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"=" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.EQ,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"-" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.MINUS,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"/" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.SLASH,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"==" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.ASG,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"&&" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.CAND,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"||" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.COR,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"<" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LT,
    new CSXToken(Pos.linenum,Pos.colnum));
}

">" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.GT,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"<=" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.LEQ,
    new CSXToken(Pos.linenum,Pos.colnum));
}

">=" {
  Pos.setpos();
  Pos.col += 2;
  return new Symbol(sym.GEQ,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"," {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.COMMA,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"!" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.NOT,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"{" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.LBRACE,
    new CSXToken(Pos.linenum,Pos.colnum));
}

"}" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.RBRACE,
    new CSXToken(Pos.linenum,Pos.colnum));
}

":" {
  Pos.setpos();
  Pos.col += 1;
  return new Symbol(sym.COLON,
    new CSXToken(Pos.linenum,Pos.colnum));
}



\n	{
	Pos.line += 1;
	Pos.col = 1;
}
" "	{
	Pos.col += 1;
}
