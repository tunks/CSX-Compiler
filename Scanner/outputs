Begin test of CSX scanner.
5:1 	class
5:7 	Identifier  (Test)
5:12 	{
6:4 	int
6:8 	Identifier  (firstInt)
6:16 	,
6:18 	Identifier  (intNumber)
6:27 	;
7:4 	int
7:8 	Identifier  (theLoooooooooooooooooooooooooooooooooooooooooooooooooooooooooogerInt)
7:76 	;
8:4 	int
8:8 	Identifier  (array)
8:13 	[
8:14 	Integer literal(10)
8:16 	]
8:17 	;
10:4 	bool
10:9 	Identifier  (isTrue)
10:15 	,
10:17 	Identifier  (isFalse)
10:24 	;
12:4 	char
12:9 	Identifier  (c)
12:10 	;
14:4 	Identifier  (firstInt)
14:13 	=
14:15 	Integer literal(-12)
14:19 	;
16:4 	Identifier  (intNumber)
16:14 	=
********ERROR: The value below is larger than MAX_VALUE, it has been replaced by MAX_VALUE
16:16 	Integer literal(2147483647)
16:82 	;
18:4 	const
18:10 	Identifier  (i)
18:12 	=
********ERROR: The value below is smaller than MIN_VALUE, it has been replaced by MIN_VALUE
18:14 	Integer literal(-2147483648)
18:89 	;
20:4 	Identifier  (string01)
20:13 	=
20:15 	String literal("string\"01\t01\n\\")
20:35 	;
22:4 	Identifier  (string02)
22:13 	=
22:15 	String literal("\\\\\n\t\"")
22:27 	;
24:4 	Identifier  (c)
24:6 	=
24:8 	Char literal('\n')
24:9 	;
26:4 	Integer literal(2)
26:6 	Identifier  (c)
26:8 	=
26:10 	Char literal('\t')
26:11 	;
28:4 	Identifier  (c03)
28:8 	=
28:10 	Char literal('"')
28:11 	;
30:4 	Identifier  (c04)
30:8 	=
30:10 ***ERROR: invalid token (')
30:12 ***ERROR: invalid token (')
30:13 	;
32:4 	Identifier  (c05)
32:8 	=
32:10 	Char literal('\'')
32:11 	;
33:17 	Identifier  (c06)
33:21 	=
33:23 ***ERROR: invalid token (')
33:24 	Identifier  (ab)
33:26 ***ERROR: invalid token (')
33:27 	;
35:4 	if
35:7 	(
35:8 	(
35:9 	Identifier  (firstInt)
35:18 	!=
35:21 	Identifier  (intNumber)
35:30 	)
35:33 	||
35:36 	(
35:37 	Identifier  (intNumber)
35:47 	==
35:50 	Identifier  (c)
35:51 	)
35:52 	)
35:54 	{
36:17 	Identifier  (i)
36:18 	=
36:19 ***ERROR: invalid token (~)
36:20 	Integer literal(-120)
36:24 	;
37:17 	Identifier  (for)
37:21 	(
37:22 	Identifier  (i)
37:24 	=
37:26 	Integer literal(100)
37:29 	;
37:31 	Identifier  (i)
37:33 	>=
37:36 	Integer literal(-100)
37:40 	;
37:42 	Identifier  (i)
37:43 	=
37:44 	Identifier  (i)
37:45 	-
37:46 	Integer literal(10)
37:49 	)
37:51 	{
38:25 	Identifier  (i)
38:27 	=
38:30 	(
38:31 	Identifier  (arrar)
38:36 	[
38:37 	Integer literal(10)
38:39 	]
38:41 	+
38:43 	Identifier  (i)
38:44 	)
38:46 	/
38:48 	Identifier  (i)
38:49 	;
39:25 	print
39:30 	(
39:31 	Identifier  (i)
39:32 	,
39:34 	String literal("\n")
39:38 	)
39:39 	;
39:42 	read
39:46 	(
39:47 	Identifier  (i)
39:48 	)
39:49 	;
39:50 	}
40:4 	}
42:4 	Identifier  (for)
42:8 	(
42:9 	Identifier  (i)
42:11 	=
42:13 	Integer literal(-123)
42:17 	;
42:19 	Identifier  (i)
42:21 	!=
42:24 	Integer literal(0)
42:25 	;
42:27 	Identifier  (i)
42:29 	=
42:31 	Identifier  (i)
42:33 	*
42:35 	Identifier  (i)
42:36 	)
42:38 	{
43:9 	Identifier  (isFalse)
43:17 	=
43:19 	Identifier  (FLASe)
43:24 	;
44:30 	Identifier  (isTure)
44:37 	=
44:39 	Identifier  (TURE)
44:43 	;
45:9 	if
45:12 	(
45:13 	Identifier  (i)
45:15 	<
45:17 	Integer literal(0)
45:19 	&&
45:21 	Identifier  (i)
45:22 	!=
45:24 	Integer literal(0)
45:25 	)
46:25 	return
46:31 	;
47:17 	else
48:25 	continue
48:33 	;
49:1 	}
51:9 	void
51:14 	Identifier  (main)
51:18 	(
51:19 	)
51:21 	{
52:17 	while
52:23 	(
52:24 	Identifier  (TURE)
52:28 	)
53:19 	print
53:24 	(
53:25 	String literal("true")
53:31 	)
53:32 	;
54:19 	break
54:24 	;
55:9 	}
57:9 	Identifier  (string03)
57:18 	=
57:20 	String literal("1234567890*0987654321%%1234567890$098765432112345+++++++~~~~~~~~~~~\n")
57:91 	;
59:5 ***ERROR: invalid token ($)
59:6 ***ERROR: invalid token ($)
59:7 ***ERROR: invalid token ($)
59:8 	+
59:11 ***ERROR: invalid token (~)
59:12 ***ERROR: invalid token (~)
59:13 ***ERROR: invalid token (~)
59:15 	=
59:17 ***ERROR: invalid token (?)
59:18 	;
61:5 	return
61:11 	;
63:1 	}
End test of CSX scanner.
